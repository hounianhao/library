apply plugin: 'com.android.application'
//// butterKnife必须（哪里使用放哪里）
//apply plugin: 'com.jakewharton.butterknife'
android {
    def versions = rootProject.ext.versions
    compileSdkVersion versions.compileVersion
    buildToolsVersion versions.buildToolVersion
    defaultConfig {
        multiDexEnabled = true
        applicationId versions.applicationId
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode versions.versionCode
        versionName versions.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // 阿里巴巴ARouter
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    // 防止打包过程中出现OOM
    dexOptions {
        // 该属性已经被弃用  去掉
        // incremental true
        javaMaxHeapSize "4g"
    }
//    // 设置签名文件
//    signingConfigs {
//        release {
//            storeFile file('XFLProperty.jks')
//            storePassword "111111"
//            keyAlias "XFLProperty"
//            keyPassword "111111"
//        }
//    }

    buildTypes {
        release {
            // 定义代码混淆文件 注意：proguard-rules.pro要放在主工程的目录下
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 是否混淆代码
            minifyEnabled true
            //是否zip对齐
            zipAlignEnabled true
            // 缩减resource文件
            shrinkResources true
            // 设置打包后应用名称
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    if (outputFileName.endsWith('.apk')) {
                        if ("debug".equalsIgnoreCase(variant.buildType.name)) {
                            outputFileName = "XFLProperty_${getTime()}_${defaultConfig.versionName}_Test.apkk"
                        } else if ("release".equalsIgnoreCase(variant.buildType.name)) {
                            outputFileName = "XFLProperty_${getTime()}_${defaultConfig.versionName}.apk"
                        }
                    }
                }
            }
//            signingConfig signingConfigs.release
        }
        debug {
            // 定义代码混淆文件 注意：proguard-rules.pro要放在主工程的目录下
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 是否混淆代码
            minifyEnabled false
            // 设置打包后应用名称
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    if (outputFileName.endsWith('.apk')) {
                        if ("debug".equalsIgnoreCase(variant.buildType.name)) {
                            outputFileName = "XFLProperty_${getTime()}_${defaultConfig.versionName}_Test.apk"
                        } else if ("release".equalsIgnoreCase(variant.buildType.name)) {
                            outputFileName = "XFLProperty_${getTime()}_${defaultConfig.versionName}.apk"
                        }
                    }
                }
            }
//            signingConfig signingConfigs.release
        }
    }

    //    //设置了resourcePrefix值后，所有的资源名必须以指定的字符串做前缀，否则会报错。
    //    //但是resourcePrefix这个值只能限定xml里面的资源，并不能限定图片资源，所有图片资源仍然需要手动去修改资源名。
    //    resourcePrefix "main_"
}

//打包时，APK文件名使用的获取时间的方法
def static getTime() {
    return new Date().format("yyMMdd", TimeZone.getDefault())
}

dependencies {
    def dependencies = rootProject.ext.deps
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation dependencies.junit
    androidTestImplementation dependencies.test
    androidTestImplementation(dependencies.testEspresso) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    // V7包
    compile dependencies.appcompat
    // design包
    compile dependencies.supportDesign
//    implementation project(':baselibrary')
//    implementation project(':framelibrary')
//    implementation project(':thirdsupport')
    // 内存泄漏监测
    debugImplementation dependencies.debugLeakcanary
    releaseImplementation dependencies.releaseLeakcanary
//    // ARouter
//    annotationProcessor dependencies.ArouterAnnotation
//    // butterKnife
//    compile dependencies.butterKnife
//    // butterKnife注解处理器
//    annotationProcessor dependencies.butterKnifeAnnotation
    // 分包
    compile dependencies.multidex
//    implementation project(':gallery')
}
